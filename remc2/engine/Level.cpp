#include "Level.h"

#include "Animation.h"
#include "Basic.h"
#include "Events.h"
#include "GameUI.h"
#include "Graphics.h"
#include "MenusAndIntros.h"
#include "PlayerInput.h"
#include "Terrain.h"


void LoadTextureData(__int16 vgaTypeResolution, MapType_t MapType, uint8_t* textureBuffer);
void sub_71890();
void sub_718F0();
type_E9C08* sub_72120(unsigned __int16 a1);
type_x_DWORD_E9C28_str* sub_71B40(int a1, unsigned __int16 a2, type_x_DWORD_E9C28_str* a3);


char x_BYTE_E29E8 = 1; // weak
type_str_164 unk_F42B0x[1136]; // weak//2c52b0
type_str_160 str_D7BD6[157] = {
{0x0005,0x0000,0x0013,0x0028,0x002A,0x0154,0x0007,0x00F4,0xFFFF,0x0000,0x00000000,{0x00,0x00},0x0000,0x0000,0x0000,0x00,{0x00}},
{0x0005,0x0001,0x00EE,0xFFFF,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x00000000,{0x00,0x00},0x0000,0x0000,0x0000,0x00,{0x00}},
{0x0005,0x0002,0x0003,0xFFFF,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x00000000,{0x00,0x00},0x0000,0x0000,0x0000,0x00,{0x00}},
{0x0005,0x0003,0x0059,0x0058,0x002A,0x0154,0x0007,0x00F4,0xFFFF,0x0000,0x00000000,{0x00,0x00},0x0000,0x0000,0x0000,0x00,{0x00}},
{0x0005,0x0004,0x0000,0x0001,0x00CE,0x00C2,0x0000,0x0000,0x0000,0x0000,0x00000000,{0x00,0x00},0x0000,0x0000,0x0000,0x00,{0x00}},
{0x0005,0x0005,0x00B9,0x002A,0x0154,0x0007,0x00F4,0xFFFF,0x0000,0x0000,0x00000000,{0x00,0x00},0x0000,0x0000,0x0000,0x00,{0x00}},
{0x0005,0x0006,0x00C1,0x0032,0x0031,0x00D8,0xFFFF,0x0000,0x0000,0x0000,0x00000000,{0x00,0x00},0x0000,0x0000,0x0000,0x00,{0x00}},
{0x0005,0x0007,0x0055,0x00C6,0x0055,0x00C4,0xFFFF,0x0000,0x0000,0x0000,0x00000000,{0x00,0x00},0x0000,0x0000,0x0000,0x00,{0x00}},
{0x0005,0x0008,0x002F,0x002A,0x0154,0x0007,0x00F4,0xFFFF,0x0000,0x0000,0x00000000,{0x00,0x00},0x0000,0x0000,0x0000,0x00,{0x00}},
{0x0005,0x0009,0x00DC,0x00ED,0x00CA,0x00C9,0x00F5,0x00C9,0x00CB,0xFFFF,0x00000000,{0x00,0x00},0x0000,0x0000,0x0000,0x00,{0x00}},
{0x0005,0x000A,0x0157,0x0158,0x0155,0x0156,0x0159,0xFFFF,0x0000,0x0000,0x00000000,{0x00,0x00},0x0000,0x0000,0x0000,0x00,{0x00}},
{0x0005,0x000B,0x00C8,0x002A,0x0154,0x0007,0x00F4,0x00D1,0xFFFF,0x0000,0x00000000,{0x00,0x00},0x0000,0x0000,0x0000,0x00,{0x00}},
{0x0005,0x000C,0x00DD,0xFFFF,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x00000000,{0x00,0x00},0x0000,0x0000,0x0000,0x00,{0x00}},
{0x0005,0x000D,0x00D9,0x00DA,0xFFFF,0x0000,0x0000,0x0000,0x0000,0x0000,0x00000000,{0x00,0x00},0x0000,0x0000,0x0000,0x00,{0x00}},
{0x0005,0x000E,0x00DB,0xFFFF,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x00000000,{0x00,0x00},0x0000,0x0000,0x0000,0x00,{0x00}},
{0x0005,0x000F,0x0000,0x0001,0x00CE,0x00C3,0xFFFF,0x0000,0x0000,0x0000,0x00000000,{0x00,0x00},0x0000,0x0000,0x0000,0x00,{0x00}},
{0x0005,0x0010,0x00CF,0x002A,0x0154,0x0007,0x00F4,0xFFFF,0x0000,0x0000,0x00000000,{0x00,0x00},0x0000,0x0000,0x0000,0x00,{0x00}},
{0x0005,0x0011,0x011D,0xFFFF,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x00000000,{0x00,0x00},0x0000,0x0000,0x0000,0x00,{0x00}},
{0x0005,0x0012,0x011E,0xFFFF,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x00000000,{0x00,0x00},0x0000,0x0000,0x0000,0x00,{0x00}},
{0x0005,0x0013,0x011F,0xFFFF,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x00000000,{0x00,0x00},0x0000,0x0000,0x0000,0x00,{0x00}},
{0x0005,0x0014,0x0120,0xFFFF,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x00000000,{0x00,0x00},0x0000,0x0000,0x0000,0x00,{0x00}},
{0x0005,0x0015,0x0131,0x0132,0x0133,0x0134,0x0135,0x0136,0x0137,0x0138,0x0000FFFF,{0x00,0x00},0x0000,0x0000,0x0000,0x00,{0x00}},
{0x0005,0x0016,0xFFFF,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x00000000,{0x00,0x00},0x0000,0x0000,0x0000,0x00,{0x00}},
{0x0005,0x0017,0x0121,0xFFFF,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x00000000,{0x00,0x00},0x0000,0x0000,0x0000,0x00,{0x00}},
{0x0005,0x0018,0x014F,0x0150,0xFFFF,0x0000,0x0000,0x0000,0x0000,0x0000,0x00000000,{0x00,0x00},0x0000,0x0000,0x0000,0x00,{0x00}},
{0x0005,0x0019,0x0122,0x0139,0x013A,0xFFFF,0x0000,0x0000,0x0000,0x0000,0x00000000,{0x00,0x00},0x0000,0x0000,0x0000,0x00,{0x00}},
{0x0005,0x001A,0x013E,0xFFFF,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x00000000,{0x00,0x00},0x0000,0x0000,0x0000,0x00,{0x00}},
{0x0005,0x001B,0x013B,0x013C,0x013D,0x0151,0xFFFF,0x0000,0x0000,0x0000,0x00000000,{0x00,0x00},0x0000,0x0000,0x0000,0x00,{0x00}},
{0x0005,0x001C,0x0123,0x0124,0xFFFF,0x0000,0x0000,0x0000,0x0000,0x0000,0x00000000,{0x00,0x00},0x0000,0x0000,0x0000,0x00,{0x00}},
{0x000A,0x0009,0x00D2,0xFFFF,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x00000000,{0x00,0x00},0x0000,0x0000,0x0000,0x00,{0x00}},
{0x000A,0x0022,0x00D4,0x00DF,0xFFFF,0x0000,0x0000,0x0000,0x0000,0x0000,0x00000000,{0x00,0x00},0x0000,0x0000,0x0000,0x00,{0x00}},
{0x000A,0x0027,0xFFFF,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x00000000,{0x00,0x00},0x0000,0x0000,0x0000,0x00,{0x00}},
{0x000A,0x0039,0xFFFF,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x00000000,{0x00,0x00},0x0000,0x0000,0x0000,0x00,{0x00}},
{0x000A,0x002C,0xFFFF,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x00000000,{0x00,0x00},0x0000,0x0000,0x0000,0x00,{0x00}},
{0x000A,0x0034,0xFFFF,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x00000000,{0x00,0x00},0x0000,0x0000,0x0000,0x00,{0x00}},
{0x000F,0x0000,0x002A,0x0154,0x0007,0x00F4,0xFFFF,0x0000,0x0000,0x0000,0x00000000,{0x00,0x00},0x0000,0x0000,0x0000,0x00,{0x00}},
{0x000F,0x0001,0x00D1,0xFFFF,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x00000000,{0x00,0x00},0x0000,0x0000,0x0000,0x00,{0x00}},
{0x000F,0x0002,0xFFFF,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x00000000,{0x00,0x00},0x0000,0x0000,0x0000,0x00,{0x00}},
{0x000F,0x0004,0xFFFF,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x00000000,{0x00,0x00},0x0000,0x0000,0x0000,0x00,{0x00}},
{0x000F,0x0007,0xFFFF,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x00000000,{0x00,0x00},0x0000,0x0000,0x0000,0x00,{0x00}},
{0x000F,0x0008,0xFFFF,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x00000000,{0x00,0x00},0x0000,0x0000,0x0000,0x00,{0x00}},
{0x000F,0x0009,0x004C,0xFFFF,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x00000000,{0x00,0x00},0x0000,0x0000,0x0000,0x00,{0x00}},
{0x000F,0x000A,0x00D4,0x00DF,0xFFFF,0x0000,0x0000,0x0000,0x0000,0x0000,0x00000000,{0x00,0x00},0x0000,0x0000,0x0000,0x00,{0x00}},
{0x000F,0x000B,0xFFFF,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x00000000,{0x00,0x00},0x0000,0x0000,0x0000,0x00,{0x00}},
{0x000F,0x000C,0xFFFF,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x00000000,{0x00,0x00},0x0000,0x0000,0x0000,0x00,{0x00}},
{0x000F,0x000D,0xFFFF,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x00000000,{0x00,0x00},0x0000,0x0000,0x0000,0x00,{0x00}},
{0x000F,0x000E,0xFFFF,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x00000000,{0x00,0x00},0x0000,0x0000,0x0000,0x00,{0x00}},
{0x000F,0x000F,0x00D3,0xFFFF,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x00000000,{0x00,0x00},0x0000,0x0000,0x0000,0x00,{0x00}},
{0x000F,0x0010,0x00D3,0xFFFF,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x00000000,{0x00,0x00},0x0000,0x0000,0x0000,0x00,{0x00}},
{0x000F,0x0011,0x00D3,0xFFFF,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x00000000,{0x00,0x00},0x0000,0x0000,0x0000,0x00,{0x00}},
{0x000F,0x0012,0x00D2,0xFFFF,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x00000000,{0x00,0x00},0x0000,0x0000,0x0000,0x00,{0x00}},
{0x000F,0x0013,0xFFFF,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x00000000,{0x00,0x00},0x0000,0x0000,0x0000,0x00,{0x00}},
{0x000F,0x0014,0x004C,0xFFFF,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x00000000,{0x00,0x00},0x0000,0x0000,0x0000,0x00,{0x00}},
{0x000F,0x0015,0x0140,0x0125,0xFFFF,0x0000,0x0000,0x0000,0x0000,0x0000,0x00000000,{0x00,0x00},0x0000,0x0000,0x0000,0x00,{0x00}},
{0x000F,0x0016,0xFFFF,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x00000000,{0x00,0x00},0x0000,0x0000,0x0000,0x00,{0x00}},
{0x000F,0x0017,0xFFFF,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x00000000,{0x00,0x00},0x0000,0x0000,0x0000,0x00,{0x00}},
{0x000F,0x0018,0xFFFF,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x00000000,{0x00,0x00},0x0000,0x0000,0x0000,0x00,{0x00}},
{0x000F,0x0019,0xFFFF,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x00000000,{0x00,0x00},0x0000,0x0000,0x0000,0x00,{0x00}},
{0xFFFF,0xFFFF,0xFFFF,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x00000000,{0x00,0x00},0x0000,0x0000,0x0000,0x00,{0x00}},
{0x0000,0x0038,0x0005,0x0016,0x0005,0x0700,0x0000,0xFFFC,0x0100,0x0200,0xFFFFFFFF,{0x00,0x0C},0x0032,0x1000,0x0200,0x00,{0x00}},
{0x0001,0x0016,0x0005,0x0016,0x0005,0x0700,0x0000,0xFFFC,0x0100,0x0200,0xFFFFFFFF,{0x00,0x09},0x0028,0x1000,0x0200,0x00,{0x00}},
{0x0002,0x0071,0x0005,0x0071,0x0005,0x0700,0x0000,0xFFFC,0x0100,0x0200,0xFFFFFFFF,{0x00,0x09},0x0028,0x1000,0x0200,0x00,{0x00}},
{0x0003,0x0011,0x0005,0x0016,0x0005,0x0700,0x0000,0xFFFC,0x0100,0x0200,0xFFFFFFFF,{0x00,0x09},0x0028,0x1000,0x0200,0x00,{0x00}},
{0x0004,0x000B,0x0005,0x0016,0x0005,0x0700,0x0000,0xFFFC,0x0100,0x0200,0xFFFFFFFF,{0x00,0x09},0x0028,0x1000,0x0200,0x00,{0x00}},
{0x0005,0x0005,0x0005,0x0016,0x0005,0x0700,0x0000,0xFFFC,0x0100,0x0200,0xFFFFFFFF,{0x00,0x09},0x0028,0x1000,0x0200,0x00,{0x00}},
{0x0006,0x0000,0x0005,0x0016,0x0005,0x0700,0x0000,0xFFFC,0x0100,0x0200,0xFFFFFFFF,{0x00,0x09},0x0028,0x1000,0x0200,0x00,{0x00}},
{0x0007,0x0100,0x0000,0x0100,0x0000,0x0400,0x0100,0xFFF0,0x0100,0x0200,0xFFFFFEFF,{0x00,0x18},0x0028,0x2000,0x0200,0x00,{0x00}},
{0x0008,0x0100,0x0005,0x0100,0x0005,0x0300,0x0080,0xFFFC,0x0100,0x0200,0xFFFFFFFF,{0x00,0x18},0x0028,0x2000,0x0200,0x00,{0x00}},
{0x0009,0x0038,0x0005,0x0016,0x0005,0x0600,0x0200,0xFFF0,0x0100,0x0200,0xFFFFFFFF,{0x00,0x0C},0x0032,0x1000,0x0200,0x00,{0x00}},
{0x000A,0x0016,0x0005,0x0016,0x0005,0x0100,0x0000,0xFF00,0x000F,0x0200,0xFFF080FE,{0x00,0x09},0x0028,0x0C00,0x0200,0x00,{0x00}},
{0x000B,0x0016,0x0005,0x0016,0x0005,0x0700,0x0200,0xFFFC,0x0046,0x0155,0xFFFFFFFF,{0x00,0x0F},0x0028,0x0F00,0x0200,0x00,{0x00}},
{0x000C,0x0022,0x0005,0x0055,0x0005,0x0000,0x0000,0xFFFC,0x001E,0x0155,0xFFFFFFFF,{0x00,0x14},0x001E,0x1400,0x00AA,0x01,{0x00}},
{0x000D,0x0016,0x0005,0x0016,0x0005,0x0500,0x0200,0xFFFC,0x0046,0x0200,0xFFFFFFFF,{0x00,0x09},0x001E,0x0C00,0x0200,0x01,{0x00}},
{0x000E,0x0071,0x0011,0x0071,0x0011,0x0700,0x0033,0xFFE0,0x0014,0x0200,0xFFFFFFFF,{0x00,0x06},0x001E,0x1400,0x02AA,0x01,{0x00}},
{0x000F,0x0022,0x0005,0x0055,0x0005,0x0100,0x0000,0xFFC0,0x0014,0x0155,0xFFF080FE,{0x00,0x14},0x001E,0x1400,0x00AA,0x01,{0x00}},
{0x0010,0x0016,0x0005,0x0071,0x0000,0x0100,0x0000,0xFF80,0x0014,0x0200,0xFFF080FE,{0x00,0x0A},0x001E,0x1400,0x0200,0x01,{0x00}},
{0x0011,0x0038,0x0005,0x0016,0x0005,0x0100,0x0000,0xFFC0,0x0014,0x0200,0xFFF080FE,{0x00,0x09},0x001E,0x1400,0x0200,0x01,{0x00}},
{0x0012,0x0016,0x0005,0x0016,0x0005,0x0100,0x0000,0xFFE0,0x0014,0x0000,0x00000001,{0x00,0x09},0x0023,0x1400,0x02AA,0x01,{0x00}},
{0x0013,0x0016,0x0005,0x0016,0x0005,0x0100,0x0000,0xFF80,0x0014,0x0200,0xFFF080FE,{0x00,0x09},0x0028,0x0F00,0x0200,0x01,{0x00}},
{0x0014,0x0038,0x0005,0x0016,0x0005,0x0500,0x0000,0xFFE7,0x0050,0x0200,0xFFFFFFFF,{0x00,0x09},0x0028,0x1900,0x0200,0x01,{0x00}},
{0x0015,0x0016,0x0005,0x0016,0x0005,0x0100,0x0000,0xFF80,0x0014,0x0200,0xFFF080FE,{0x00,0x09},0x0019,0x0800,0x0200,0x01,{0x00}},
{0x0016,0x0016,0x0005,0x0016,0x0005,0x0100,0x0000,0xFF80,0x0014,0x0200,0xFFF080FE,{0x00,0x09},0x0028,0x0C00,0x0200,0x01,{0x00}},
{0x0017,0x002D,0x0005,0x0016,0x0005,0x0700,0x0000,0xFFFC,0x003C,0x0200,0xFFFFFFFF,{0x00,0x09},0x000A,0x1E00,0x07C7,0x01,{0x00}},
{0x0018,0x0016,0x0005,0x0016,0x0005,0x0100,0x0000,0xFF00,0x0014,0x0200,0x00020000,{0x00,0x09},0x000F,0x0F00,0x0200,0x01,{0x00}},
{0x0019,0x0044,0x0005,0x0016,0x0005,0x0700,0x0100,0xFFF8,0x0046,0x0200,0xFFFFFFFF,{0x00,0x09},0x0028,0x1200,0x0200,0x11,{0x00}},
{0x001A,0x002D,0x0005,0x0016,0x0005,0x0100,0x0000,0xFF80,0x0014,0x0200,0xFFF080FE,{0x00,0x09},0x0014,0x0F00,0x0200,0x01,{0x00}},
{0x001B,0x0016,0x0005,0x0016,0x0005,0x0100,0x0000,0xFF80,0x0014,0x0200,0xFFF080FE,{0x00,0x09},0x0004,0x1900,0x0200,0x07,{0x00}},
{0x001C,0x0400,0x0005,0x0200,0x0005,0x0000,0x0000,0x0000,0x0014,0x0200,0xFFF080FE,{0x00,0x09},0x0014,0x0F00,0x0200,0x01,{0x00}},
{0x001D,0x0071,0x0011,0x0071,0x0011,0x0700,0x0033,0xFFF8,0x0014,0x0200,0xFFFFFFFF,{0x00,0x06},0x0023,0x1400,0x02AA,0x01,{0x00}},
{0x001E,0x00E3,0x0005,0x0016,0x0005,0x0100,0x0000,0xFF80,0x0014,0x0200,0xFFF080FE,{0x00,0x09},0x0023,0x1400,0x02AA,0x00,{0x00}},
{0x001F,0x0100,0x0005,0x0016,0x0005,0x0000,0x0000,0x0000,0x0032,0x0200,0xFFFFFFFF,{0x00,0x09},0x0014,0x1400,0x0200,0x05,{0x00}},
{0x0020,0x0100,0x0005,0x0016,0x0005,0x2000,0x0000,0x0000,0x0014,0x0200,0xFFFFFFFF,{0x00,0x09},0x0003,0x0C00,0x02AA,0x05,{0x00}},
{0x0021,0x0071,0x0005,0x0016,0x0005,0x2000,0x0000,0xFFE0,0x0014,0x0200,0xFFFFFFFF,{0x00,0x09},0x0014,0x0C00,0x02AA,0x05,{0x00}},
{0x0022,0x0071,0x0005,0x0016,0x0005,0x0000,0x0000,0xFF00,0x0014,0x0000,0x00000001,{0x00,0x09},0x0010,0x1000,0x02AA,0x05,{0x00}},
{0x0023,0x0100,0x0005,0x0016,0x0005,0x0000,0x0000,0xFF00,0x0014,0x0000,0x00000001,{0x00,0x09},0x0010,0x1000,0x02AA,0x05,{0x00}},
{0x0024,0x00AA,0x0005,0x0016,0x0005,0x2000,0x0000,0xFF00,0x0200,0x0200,0xFFFFFFFF,{0x00,0x09},0x0010,0x1000,0x0400,0x05,{0x00}},
{0x0025,0x0400,0x0000,0x0016,0x0005,0x2000,0x0000,0x0000,0x0155,0x0200,0xFFFFFFFF,{0x00,0x09},0x0010,0x1200,0x009F,0x05,{0x00}},
{0x0026,0x0016,0x0005,0x0016,0x0005,0x0000,0x0000,0xFE00,0x00AA,0x00AA,0xFFF080FE,{0x00,0x09},0x0010,0x1200,0x00AA,0x07,{0x00}},
{0x0027,0x002D,0x0005,0x0016,0x0005,0x0100,0x0000,0xFF00,0x0014,0x0200,0xFFF080FE,{0x00,0x09},0x0020,0x0600,0x0355,0x09,{0x00}},
{0x0028,0x005B,0x0005,0x0016,0x0005,0x0000,0x0000,0xFF00,0x0014,0x0200,0xFFF080FE,{0x00,0x09},0x0028,0x0E00,0x07C7,0x01,{0x00}},
{0x0029,0x0016,0x0005,0x0016,0x0005,0x0100,0x0000,0xFF00,0x000F,0x0200,0xFFFFFEFE,{0x00,0x09},0x0028,0x0E00,0x0200,0x09,{0x00}},
{0x002A,0x0016,0x0005,0x0016,0x0005,0x0100,0x0000,0xFF00,0x000F,0x0200,0xFFFFFEFE,{0x00,0x09},0x0028,0x0E00,0x0200,0x09,{0x00}},
{0x002B,0x00AA,0x0005,0x0016,0x0005,0x0000,0x0000,0xFF00,0x0014,0x0200,0xFFF080FE,{0x00,0x09},0x0008,0x0C00,0x0355,0x07,{0x00}},
{0x002C,0x0016,0x0005,0x0016,0x0005,0x0000,0x0000,0xFE00,0x0014,0x0100,0xFFF080FE,{0x00,0x09},0x0010,0x1400,0x02AA,0x07,{0x00}},
{0x002D,0x0100,0x0000,0x0100,0x0000,0x0C00,0x0100,0xFFF8,0x0100,0x0200,0xFFFFFEFF,{0x00,0x18},0x0028,0x2000,0x0200,0x00,{0x00}},
{0x002E,0x0005,0x0000,0x0016,0x0005,0x0100,0x0000,0xFF80,0x0014,0x0200,0xFFFFFFFF,{0x00,0x09},0x0004,0x1900,0x0200,0x07,{0x00}},
{0x002F,0x0011,0x0005,0x0071,0x0005,0x0700,0x0000,0xFFFC,0x0100,0x0200,0xFFFFFFFF,{0x00,0x09},0x0028,0x1000,0x0200,0x00,{0x00}},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x00000000,{0x00,0x00},0x0000,0x0000,0x0000,0x00,{0x00}},
{0x0000,0x0038,0x0005,0x0016,0x0005,0x0700,0x0000,0xFFFC,0x0100,0x0200,0xFFFFFFFF,{0x00,0x0C},0x0032,0x1000,0x0200,0x00,{0x00}},
{0x0001,0x0016,0x0005,0x0016,0x0005,0x0700,0x0000,0xFFFC,0x0100,0x0200,0xFFFFFFFF,{0x00,0x09},0x0028,0x1000,0x0200,0x00,{0x00}},
{0x0002,0x0071,0x0005,0x0071,0x0005,0x0700,0x0000,0xFFFC,0x0100,0x0200,0xFFFFFFFF,{0x00,0x09},0x0028,0x1000,0x0200,0x00,{0x00}},
{0x0003,0x0011,0x0005,0x0016,0x0005,0x0700,0x0000,0xFFFC,0x0100,0x0200,0xFFFFFFFF,{0x00,0x09},0x0028,0x1000,0x0200,0x00,{0x00}},
{0x0004,0x000B,0x0005,0x0016,0x0005,0x0700,0x0000,0xFFFC,0x0100,0x0200,0xFFFFFFFF,{0x00,0x09},0x0028,0x1000,0x0200,0x00,{0x00}},
{0x0005,0x0005,0x0005,0x0016,0x0005,0x0700,0x0000,0xFFFC,0x0100,0x0200,0xFFFFFFFF,{0x00,0x09},0x0028,0x1000,0x0200,0x00,{0x00}},
{0x0006,0x0000,0x0005,0x0016,0x0005,0x0700,0x0000,0xFFFC,0x0100,0x0200,0xFFFFFFFF,{0x00,0x09},0x0028,0x1000,0x0200,0x00,{0x00}},
{0x0007,0x0100,0x0000,0x0100,0x0000,0x0400,0x0100,0xFFF0,0x0100,0x0200,0xFFFFFEFF,{0x00,0x18},0x0028,0x2000,0x0200,0x00,{0x00}},
{0x0008,0x0100,0x0005,0x0100,0x0005,0x0300,0x0080,0xFFFC,0x0100,0x0200,0xFFFFFFFF,{0x00,0x18},0x0028,0x2000,0x0200,0x00,{0x00}},
{0x0009,0x0038,0x0005,0x0016,0x0005,0x0600,0x0200,0xFFF0,0x0100,0x0200,0xFFFFFFFF,{0x00,0x0C},0x0032,0x1000,0x0200,0x00,{0x00}},
{0x000A,0x0016,0x0005,0x0016,0x0005,0x0100,0x0000,0xFF00,0x000F,0x0200,0xFFF080FE,{0x00,0x09},0x0028,0x0C00,0x0200,0x00,{0x00}},
{0x000B,0x0016,0x0005,0x0016,0x0005,0x0700,0x0200,0xFFFC,0x0046,0x0155,0xFFFFFFFF,{0x00,0x0F},0x0028,0x0F00,0x0200,0x00,{0x00}},
{0x000C,0x0022,0x0005,0x0055,0x0005,0x0000,0x0000,0xFFFC,0x001E,0x0155,0xFFFFFFFF,{0x00,0x14},0x001E,0x1400,0x00AA,0x01,{0x00}},
{0x000D,0x0016,0x0005,0x0016,0x0005,0x0500,0x0200,0xFFFC,0x0046,0x0200,0xFFFFFFFF,{0x00,0x09},0x001E,0x0C00,0x0200,0x01,{0x00}},
{0x000E,0x0071,0x0011,0x0071,0x0011,0x0700,0x0033,0xFFE0,0x0014,0x0200,0xFFFFFFFF,{0x00,0x06},0x001E,0x1400,0x02AA,0x01,{0x00}},
{0x000F,0x0022,0x0005,0x0055,0x0005,0x0100,0x0000,0xFFC0,0x0014,0x0155,0xFFF080FE,{0x00,0x14},0x001E,0x1400,0x00AA,0x01,{0x00}},
{0x0010,0x0016,0x0005,0x0071,0x0000,0x0100,0x0000,0xFF80,0x0014,0x0200,0xFFF080FE,{0x00,0x0A},0x001E,0x1400,0x0200,0x01,{0x00}},
{0x0011,0x0038,0x0005,0x0016,0x0005,0x0100,0x0000,0xFFC0,0x0014,0x0200,0xFFF080FE,{0x00,0x09},0x001E,0x1400,0x0200,0x01,{0x00}},
{0x0012,0x0016,0x0005,0x0016,0x0005,0x0100,0x0000,0xFFE0,0x0014,0x0000,0x00000001,{0x00,0x09},0x0023,0x1400,0x02AA,0x01,{0x00}},
{0x0013,0x0016,0x0005,0x0016,0x0005,0x0100,0x0000,0xFF80,0x0014,0x0200,0xFFF080FE,{0x00,0x09},0x0028,0x0F00,0x0200,0x01,{0x00}},
{0x0014,0x0038,0x0005,0x0016,0x0005,0x0500,0x0000,0xFFE7,0x0050,0x0200,0xFFFFFFFF,{0x00,0x09},0x0028,0x1900,0x0200,0x01,{0x00}},
{0x0015,0x0016,0x0005,0x0016,0x0005,0x0100,0x0000,0xFF80,0x0014,0x0200,0xFFF080FE,{0x00,0x09},0x0019,0x0800,0x0200,0x01,{0x00}},
{0x0016,0x0016,0x0005,0x0016,0x0005,0x0100,0x0000,0xFF80,0x0014,0x0200,0xFFF080FE,{0x00,0x09},0x0028,0x0C00,0x0200,0x01,{0x00}},
{0x0017,0x002D,0x0005,0x0016,0x0005,0x0700,0x0000,0xFFFC,0x003C,0x0200,0xFFFFFFFF,{0x00,0x09},0x000A,0x1E00,0x07C7,0x01,{0x00}},
{0x0018,0x0016,0x0005,0x0016,0x0005,0x0100,0x0000,0xFF00,0x0014,0x0200,0x00020000,{0x00,0x09},0x000F,0x0F00,0x0200,0x01,{0x00}},
{0x0019,0x0044,0x0005,0x0016,0x0005,0x0700,0x0100,0xFFF8,0x0046,0x0200,0xFFFFFFFF,{0x00,0x09},0x0028,0x1200,0x0200,0x11,{0x00}},
{0x001A,0x002D,0x0005,0x0016,0x0005,0x0100,0x0000,0xFF80,0x0014,0x0200,0xFFF080FE,{0x00,0x09},0x0014,0x0F00,0x0200,0x01,{0x00}},
{0x001B,0x0016,0x0005,0x0016,0x0005,0x0100,0x0000,0xFF80,0x0014,0x0200,0xFFF080FE,{0x00,0x09},0x0004,0x1900,0x0200,0x07,{0x00}},
{0x001C,0x0400,0x0005,0x0200,0x0005,0x0000,0x0000,0x0000,0x0014,0x0200,0xFFF080FE,{0x00,0x09},0x0014,0x0F00,0x0200,0x01,{0x00}},
{0x001D,0x0071,0x0011,0x0071,0x0011,0x0700,0x0033,0xFFF8,0x0014,0x0200,0xFFFFFFFF,{0x00,0x06},0x0023,0x1400,0x02AA,0x01,{0x00}},
{0x001E,0x00E3,0x0005,0x0016,0x0005,0x0100,0x0000,0xFF80,0x0014,0x0200,0xFFF080FE,{0x00,0x09},0x0023,0x1400,0x02AA,0x00,{0x00}},
{0x001F,0x0100,0x0005,0x0016,0x0005,0x0000,0x0000,0x0000,0x0032,0x0200,0xFFFFFFFF,{0x00,0x09},0x0014,0x1400,0x0200,0x05,{0x00}},
{0x0020,0x0100,0x0005,0x0016,0x0005,0x2000,0x0000,0x0000,0x0014,0x0200,0xFFFFFFFF,{0x00,0x09},0x0003,0x0C00,0x02AA,0x05,{0x00}},
{0x0021,0x0071,0x0005,0x0016,0x0005,0x2000,0x0000,0xFFE0,0x0014,0x0200,0xFFFFFFFF,{0x00,0x09},0x0014,0x0C00,0x02AA,0x05,{0x00}},
{0x0022,0x0071,0x0005,0x0016,0x0005,0x0000,0x0000,0xFF00,0x0014,0x0000,0x00000001,{0x00,0x09},0x0010,0x1000,0x02AA,0x05,{0x00}},
{0x0023,0x0100,0x0005,0x0016,0x0005,0x0000,0x0000,0xFF00,0x0014,0x0000,0x00000001,{0x00,0x09},0x0010,0x1000,0x02AA,0x05,{0x00}},
{0x0024,0x00AA,0x0005,0x0016,0x0005,0x2000,0x0000,0xFF00,0x0200,0x0200,0xFFFFFFFF,{0x00,0x09},0x0010,0x1000,0x0400,0x05,{0x00}},
{0x0025,0x0400,0x0000,0x0016,0x0005,0x2000,0x0000,0x0000,0x0155,0x0200,0xFFFFFFFF,{0x00,0x09},0x0010,0x1200,0x009F,0x05,{0x00}},
{0x0026,0x0016,0x0005,0x0016,0x0005,0x0000,0x0000,0xFE00,0x00AA,0x00AA,0xFFF080FE,{0x00,0x09},0x0010,0x1200,0x00AA,0x07,{0x00}},
{0x0027,0x002D,0x0005,0x0016,0x0005,0x0100,0x0000,0xFF00,0x0014,0x0200,0xFFF080FE,{0x00,0x09},0x0020,0x0600,0x0355,0x09,{0x00}},
{0x0028,0x005B,0x0005,0x0016,0x0005,0x0000,0x0000,0xFF00,0x0014,0x0200,0xFFF080FE,{0x00,0x09},0x0028,0x0E00,0x07C7,0x01,{0x00}},
{0x0029,0x0016,0x0005,0x0016,0x0005,0x0100,0x0000,0xFF00,0x000F,0x0200,0xFFFFFEFE,{0x00,0x09},0x0028,0x0E00,0x0200,0x09,{0x00}},
{0x002A,0x0016,0x0005,0x0016,0x0005,0x0100,0x0000,0xFF00,0x000F,0x0200,0xFFFFFEFE,{0x00,0x09},0x0028,0x0E00,0x0200,0x09,{0x00}},
{0x002B,0x00AA,0x0005,0x0016,0x0005,0x0000,0x0000,0xFF00,0x0014,0x0200,0xFFF080FE,{0x00,0x09},0x0008,0x0C00,0x0355,0x07,{0x00}},
{0x002C,0x0016,0x0005,0x0016,0x0005,0x0000,0x0000,0xFE00,0x0014,0x0100,0xFFF080FE,{0x00,0x09},0x0010,0x1400,0x02AA,0x07,{0x00}},
{0x002D,0x0100,0x0000,0x0100,0x0000,0x0C00,0x0100,0xFFF8,0x0100,0x0200,0xFFFFFEFF,{0x00,0x18},0x0028,0x2000,0x0200,0x00,{0x00}},
{0x002E,0x0005,0x0000,0x0016,0x0005,0x0100,0x0000,0xFF80,0x0014,0x0200,0xFFFFFFFF,{0x00,0x09},0x0004,0x1900,0x0200,0x07,{0x00}},
{0x002F,0x0011,0x0005,0x0071,0x0005,0x0700,0x0000,0xFFFC,0x0100,0x0200,0xFFFFFFFF,{0x00,0x09},0x0028,0x1000,0x0200,0x00,{0x00}},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x00000000,{0x00,0x00},0x0000,0x0000,0x0000,0x00,{0x00} } };


//----- (00055250) --------------------------------------------------------
bool SaveLevelSLEV_55250(uint8_t savefileindex, char* savefileindex2)//236250 //in game save
{
	bool success;
	int temptime; // edi
	long acttime; // eax

	//fix for saving
	for (int indexx = 1; x_DWORD_EA3E4[indexx] < x_DWORD_EA3E4[1000]; indexx++)
		//if (memory_readable(x_DWORD_EA3E4[indexx]->dword_0xA4_164x,4))
	{
		if (x_DWORD_EA3E4[indexx]->dword_0xA4_164x == unk_F42B0x)//0x014F82E8//0x2c75e28-(uint32_t)&D41A0_BYTESTR_0
			x_DWORD_EA3E4[indexx]->dword_0xA4_164x = (type_str_164*)0x2c75e28;
	}
	//fix for saving

	success = false;
	sprintf(printbuffer, "%s/%s/%s%d%s.DAT", gameDataPath.c_str(), "SAVE", "SLEV", savefileindex + 1, savefileindex2);
	D41A0_0.dword_0x36DF6 = &str_D7BD6[59]; //(x_DWORD)&unk_D7BD6[0x7d6];
	temptime = D41A0_0.array_0x2BDE[D41A0_0.LevelIndex_0xc].dword_0x3E6_2BE4_12228.dword_0x189_393;
	acttime = j___clock();
	D41A0_0.array_0x2BDE[D41A0_0.LevelIndex_0xc].dword_0x3E6_2BE4_12228.dword_0x189_393 = acttime - D41A0_0.array_0x2BDE[D41A0_0.LevelIndex_0xc].dword_0x3E6_2BE4_12228.dword_0x189_393;

	//x64 fix
	type_shadow_D41A0_BYTESTR_0 shadow_type_D41A0_BYTESTR_0;
	Convert_to_shadow_D41A0_BYTESTR_0(&D41A0_0, &shadow_type_D41A0_BYTESTR_0);
	//x64 fix

	int size = sizeof(shadow_type_D41A0_BYTESTR_0);
	if (DataFileIO::sub_98C48_open_nwrite_close(printbuffer, (uint8_t*)&shadow_type_D41A0_BYTESTR_0, size) == size) success = true;
	D41A0_0.array_0x2BDE[D41A0_0.LevelIndex_0xc].dword_0x3E6_2BE4_12228.dword_0x189_393 = temptime;

	//fix for saving
	for (int indexx = 1; x_DWORD_EA3E4[indexx] < x_DWORD_EA3E4[1000]; indexx++)
	{
		type_str_164* Zerotype_str_164 = 0;
		if (x_DWORD_EA3E4[indexx]->dword_0xA4_164x == (type_str_164*)&((int8_t*)Zerotype_str_164)[0x2c75e28])//0x014F82E8//0x2c75e28-(uint32_t)&D41A0_BYTESTR_0
			x_DWORD_EA3E4[indexx]->dword_0xA4_164x = unk_F42B0x;
	}
	//fix for saving

	return success;
}

//----- (00055320) --------------------------------------------------------
bool SaveLevelSMAP_55320(uint8_t savefileindex, char* savefileindex2)//236320 //file index added for develop
{
	FILE* savesmapfile; // eax
	size_t writedsize; // [esp+40h] [ebp-8h]
	
	Logger->debug("InGameSave-begin");

	sprintf(printbuffer, "%s/%s/%s%d%s.DAT", gameDataPath.c_str(), "SAVE", "SMAP", savefileindex + 1, savefileindex2);
	savesmapfile = DataFileIO::CreateOrOpenFile(printbuffer, 546);
	if (savesmapfile)
	{
		DataFileIO::WriteFile_98CAA(savesmapfile, (uint8_t*)mapTerrainType_10B4E0, 0x10000);
		DataFileIO::WriteFile_98CAA(savesmapfile, (uint8_t*)mapHeightmap_11B4E0, 0x10000);
		DataFileIO::WriteFile_98CAA(savesmapfile, (uint8_t*)mapShading_12B4E0, 0x10000);
		DataFileIO::WriteFile_98CAA(savesmapfile, (uint8_t*)mapAngle_13B4E0, 0x10000);
		DataFileIO::WriteFile_98CAA(savesmapfile, (uint8_t*)x_BYTE_14B4E0_second_heightmap, 0x10000);
		DataFileIO::WriteFile_98CAA(savesmapfile, (uint8_t*)mapEntityIndex_15B4E0, 0x20000);
		writedsize = DataFileIO::WriteFile_98CAA(savesmapfile, (uint8_t*)x_BYTE_F2CD0x, 4802) != 4802;
		DataFileIO::Close(savesmapfile);
	}

	Logger->debug("InGameSave-end-{}", writedsize);

	return (writedsize == 0);
}
// 10000: using guessed type void /*__noreturn*/ sub_10000();
// 8E3D5: using guessed type x_DWORD sprintf(x_DWORD, const char *, ...);
// D41A4: using guessed type int x_DWORD_D41A4;

//----- (00055450) --------------------------------------------------------
bool SaveLevelSVER_55450(uint8_t savefileindex, int32_t levelNumber, char* savefileindex2)//236450 //fileindex added for developing
{
	int32_t data[2]; // [esp+40h] [ebp-8h]
	data[1] = levelNumber;
	data[0] = 15;
	bool success = false;
	sprintf(printbuffer, "%s/%s/%s%d%s.DAT", gameDataPath.c_str(), "SAVE", "SVER", savefileindex + 1, savefileindex2);
	if (DataFileIO::sub_98C48_open_nwrite_close(printbuffer, (uint8_t*)data, 2*sizeof(int32_t)) == 8)
		success = true;
	return success;
}

//----- (000555D0) --------------------------------------------------------
bool LoadLevel_555D0(uint8_t fileindex, int levelindex)//2365d0
{	
	int temp0x219A;
	int temp0x219E;
	int temp0x21A2;
	int temp0x21A6;
	GraphicsStruct_t tempGr;
	DisplayStruct_t tempDisp;
	type_str_0x2192 temp0x2192;
	type_str_0x2196 temp0x2196;
	type_str_0x21AA temp0x21AA;
	type_str_0x21AE temp0x21AE;
	type_str_0x21B2 temp0x21B2;
	type_str_0x21B6 temp0x21B6;

	bool readSuccess = false;
	if (!(x_D41A0_BYTEARRAY_4_struct.setting_byte1_22 & 0x10))
	{
		tempGr = D41A0_0.m_GameSettings.m_Graphics;
		tempDisp = D41A0_0.m_GameSettings.m_Display;
		temp0x2192 = D41A0_0.m_GameSettings.str_0x2192;
		temp0x2196 = D41A0_0.m_GameSettings.str_0x2196;
		temp0x219A = D41A0_0.dword_0x219A;
		temp0x219E = D41A0_0.dword_0x219E;
		temp0x21A2 = D41A0_0.dword_0x21A2;
		temp0x21A6 = D41A0_0.dword_0x21A6;
		temp0x21AA = D41A0_0.str_0x21AA;
		temp0x21AE = D41A0_0.str_0x21AE;
		temp0x21B2 = D41A0_0.str_0x21B2;
		temp0x21B6 = D41A0_0.str_0x21B6;
		readSuccess = DataFileIO::sub_55750_TestExistingSaveFile(fileindex, levelindex);
		//adress  23662a
		if (readSuccess)
		{
			readSuccess = LoadLevelSMAP_558E0(fileindex);
			if (readSuccess)
			{
				qmemcpy(
					&x_D41A0_BYTEARRAY_4_struct.byteindex_256ar,
					&D41A0_0.array_0x2BDE[D41A0_0.LevelIndex_0xc],
					0x84Cu);
				readSuccess = LoadLevelSLEV_55A10(fileindex);
				if (readSuccess)
				{
					sub_55100(2);
					sub_57680_FixPointersAfterLoad();
					sub_549A0(&D41A0_0.array_0x2BDE[D41A0_0.LevelIndex_0xc].dword_0x3E6_2BE4_12228.str_611, &x_D41A0_BYTEARRAY_4_struct.byteindex_256ar.dword_0x3E6_2BE4_12228.str_611);
					sub_49F90();
					D41A0_0.dword_0x11e6 = -1;
					sub_55AB0(&D41A0_0.array_0x2BDE[D41A0_0.LevelIndex_0xc]);
					sub_71990();
					FlvInitSet_473B0();
				}
			}
		}
		D41A0_0.m_GameSettings.m_Graphics = tempGr;
		D41A0_0.m_GameSettings.m_Display = tempDisp;
		D41A0_0.m_GameSettings.str_0x2192 = temp0x2192;
		D41A0_0.m_GameSettings.str_0x2196 = temp0x2196;
		D41A0_0.dword_0x219A = temp0x219A;
		D41A0_0.dword_0x219E = temp0x219E;
		D41A0_0.dword_0x21A2 = temp0x21A2;
		D41A0_0.dword_0x21A6 = temp0x21A6;
		D41A0_0.str_0x21AA = temp0x21AA;
		D41A0_0.str_0x21AE = temp0x21AE;
		D41A0_0.str_0x21B2 = temp0x21B2;
		D41A0_0.str_0x21B6 = temp0x21B6;
	}
	return readSuccess;
}

//----- (000558E0) --------------------------------------------------------
bool LoadLevelSMAP_558E0(uint8_t savefileindex)//2368e0
{
	Logger->debug("InGameLoad-begin\n");

	//fix
	x_D41A0_BYTEARRAY_4_struct.dword_38519 = x_DWORD_EA3E4[1];
	//fix

	// FIXME: cannot set this here.
	//        was before: debugafterload = 1;
	//        cannot be: CommandLineParams.DoDebugafterload() = 1;
	x_D41A0_BYTEARRAY_4_struct.setting_30 = 0x3d;//fix same run after load
	x_WORD_17B4E0 = 0x21ed;//fix random variable for debugging

	sprintf(printbuffer, "%s/%s/%s%d.DAT", gameDataPath.c_str(), "SAVE", "SMAP", savefileindex + 1);
	FILE* loadfile = DataFileIO::CreateOrOpenFile(printbuffer, 512);
	if (loadfile)
	{
		DataFileIO::Read(loadfile, (uint8_t*)mapTerrainType_10B4E0, 0x10000);
		DataFileIO::Read(loadfile, (uint8_t*)mapHeightmap_11B4E0, 0x10000);
		DataFileIO::Read(loadfile, (uint8_t*)mapShading_12B4E0, 0x10000);
		DataFileIO::Read(loadfile, (uint8_t*)mapAngle_13B4E0, 0x10000);
		DataFileIO::Read(loadfile, (uint8_t*)x_BYTE_14B4E0_second_heightmap, 0x10000);
		DataFileIO::Read(loadfile, (uint8_t*)mapEntityIndex_15B4E0, 0x20000);
		int truesize = DataFileIO::Read(loadfile, (uint8_t*)x_BYTE_F2CD0x, 4802) == 4802;
		DataFileIO::Close(loadfile);
		if (truesize) {
			Logger->debug("InGameLoad-end-ok\n");
			return 1;
		}
	}
	Logger->debug("InGameLoad-end-error\n");
	return 0;
}

//----- (00055A10) --------------------------------------------------------
bool LoadLevelSLEV_55A10(uint8_t savefileindex)//236a10
{
	bool success = false;
	sprintf(printbuffer, "%s/%s/%s%d.DAT", gameDataPath.c_str(), "SAVE", "SLEV", savefileindex + 1);
	//x64 fix
	uint8_t* D41A0_pointer;
	type_shadow_D41A0_BYTESTR_0 shadow_D41A0_BYTESTR_0;
	D41A0_pointer = (uint8_t*)&shadow_D41A0_BYTESTR_0;
	if (DataFileIO::ReadFileAndDecompress(printbuffer, &D41A0_pointer) == sizeof(type_shadow_D41A0_BYTESTR_0))
	{
		D41A0_0.array_0x2BDE[D41A0_0.LevelIndex_0xc].dword_0x3E6_2BE4_12228.dword_0x189_393 = j___clock() - D41A0_0.array_0x2BDE[D41A0_0.LevelIndex_0xc].dword_0x3E6_2BE4_12228.dword_0x189_393;
		success = true;
	}
	type_str_164* tempx_DWORD_EA3E4_0 = x_DWORD_EA3E4[0]->dword_0xA4_164x;//fix for x64
	Convert_from_shadow_D41A0_BYTESTR_0(&shadow_D41A0_BYTESTR_0, &D41A0_0);
	x_DWORD_EA3E4[0]->dword_0xA4_164x =tempx_DWORD_EA3E4_0;//fix for x64
	return success;
}

//----- (00055080) --------------------------------------------------------
bool SaveLevel_55080(uint8_t savefileindex, int32_t LevelNumber, char* savefileindex2)//236080 //filenameindex added for debugging
{
	bool success = false;
	if (!(x_D41A0_BYTEARRAY_4_struct.setting_byte1_22 & 0x10))
	{
		sub_71930();
		sub_55100(1);
		success = SaveLevelSLEV_55250(savefileindex, savefileindex2);
		if (success)
		{
			success = SaveLevelSMAP_55320(savefileindex, savefileindex2);
			if (success)
				success = SaveLevelSVER_55450(savefileindex, LevelNumber, savefileindex2);
		}
		sub_55100(2);
		sub_49F90();
		D41A0_0.dword_0x11e6 = -1;
	}
	return success;
}

//----- (00049270) --------------------------------------------------------
void sub_49270_generate_level_features(Type_Level_2FECE* terrain)//22a270
{
	SetStagetagForTermod_49830(terrain);
	//adress 22A27D
	if (CommandLineParams.DoDebugSequences()) {
		add_compare(0x22A280, CommandLineParams.DoDebugafterload());
	}
	GenerateEvents_49290(terrain, 1, 640, 480);
	if (CommandLineParams.DoDebugSequences()) {
		add_compare(0x22A288, CommandLineParams.DoDebugafterload());
	}
}

//----- (00047160) --------------------------------------------------------
void sub_47160()//228160
{
	//unsigned __int8 v0; // al

	//v0 = x_D41A0_BYTEARRAY_0[196308];

	if (D41A0_0.terrain_2FECE.MapType == MapType_t::Day)
	{
		sprintf(xadatamsprd00dat.path, "%s/%s", cdDataPath.c_str(), "DATA/MSPRD0-0.DAT");
		sprintf(xadatamsprd00tab.path, "%s/%s", cdDataPath.c_str(), "DATA/MSPRD0-0.TAB");
		sprintf(xadatahsprd00dat.path, "%s/%s", cdDataPath.c_str(), "DATA/HSPRD0-0.DAT");
		sprintf(xadatahsprd00tab.path, "%s/%s", cdDataPath.c_str(), "DATA/HSPRD0-0.TAB");
	}
	else if (D41A0_0.terrain_2FECE.MapType == MapType_t::Night)
	{
		sprintf(xadatamsprd00dat.path, "%s/%s", cdDataPath.c_str(), "DATA/MSPRN0-0.DAT");
		sprintf(xadatamsprd00tab.path, "%s/%s", cdDataPath.c_str(), "DATA/MSPRN0-0.TAB");
		sprintf(xadatahsprd00dat.path, "%s/%s", cdDataPath.c_str(), "DATA/HSPRN0-0.DAT");
		sprintf(xadatahsprd00tab.path, "%s/%s", cdDataPath.c_str(), "DATA/HSPRN0-0.TAB");
	}
	else if (D41A0_0.terrain_2FECE.MapType == MapType_t::Cave)
	{
		sprintf(xadatamsprd00dat.path, "%s/%s", cdDataPath.c_str(), "DATA/MSPRC0-0.DAT");
		sprintf(xadatamsprd00tab.path, "%s/%s", cdDataPath.c_str(), "DATA/MSPRC0-0.TAB");
		sprintf(xadatahsprd00dat.path, "%s/%s", cdDataPath.c_str(), "DATA/HSPRC0-0.DAT");
		sprintf(xadatahsprd00tab.path, "%s/%s", cdDataPath.c_str(), "DATA/HSPRC0-0.TAB");
	}

	memcpy(pstr[psxadatamsprd00dat].path, xadatamsprd00dat.path, strlen(xadatamsprd00dat.path));
	memcpy(pstr[psxadatamsprd00tab].path, xadatamsprd00tab.path, strlen(xadatamsprd00tab.path));
	memcpy(pstr[psxadatahsprd00dat].path, xadatahsprd00dat.path, strlen(xadatahsprd00dat.path));
	memcpy(pstr[psxadatahsprd00tab].path, xadatahsprd00tab.path, strlen(xadatahsprd00tab.path));

	if (x_WORD_180660_VGA_type_resolution == 1)
	{
		DataFileIO::sub_84250_load_file_array(psxadatamsprd00dat);

		//fix
		filearray_2aa18c[filearrayindex_MSPRD00DATTAB] = { &MSPRD00TAB_BEGIN_BUFFER,&MSPRD00TAB_END_BUFFER,&MSPRD00DAT_BEGIN_BUFFER,&posistruct5 };
		//filearray_2aa18c[filearrayindex_FONTS0DATTAB] = { &FONTS0TAB_BEGIN_BUFFER,&FONTS0TAB_END_BUFFER,&FONTS0DAT_BEGIN_BUFFER,&posistruct2 };
		//fix

		/*
		if (x_DWORD_E9C3C)
			sub_83E80_freemem4(x_DWORD_E9C3C);
		x_DWORD_E9C3C = (uint8_t*)sub_83CD0_malloc2(64000);
		*/
		//fix
		if (pre_x_DWORD_E9C3C)
			FreeMem_83E80(pre_x_DWORD_E9C3C);
		pre_x_DWORD_E9C3C = (uint8_t*)Malloc_83CD0(3000000);
		x_DWORD_E9C3C = &pre_x_DWORD_E9C3C[200000];
		//sub_6EB90(&filearray_2aa18c[filearrayindex_FONTS0DATTAB]);//2aa1d4
		help_VGA_type_resolution = 1;
		//fix
	}
	else
	{
		DataFileIO::sub_84250_load_file_array(psxadatahsprd00dat);//tady se to nahraje

		//fix
		filearray_2aa18c[filearrayindex_MSPRD00DATTAB] = { &HSPRD00TAB_BEGIN_BUFFER,&HSPRD00TAB_END_BUFFER,&HSPRD00DAT_BEGIN_BUFFER,&posistruct5 };
		//filearray_2aa18c[filearrayindex_FONTS0DATTAB] = { &HFONT3TAB_BEGIN_BUFFER,&HFONT3TAB_END_BUFFER,&HFONT3DAT_BEGIN_BUFFER,&posistruct27 };
		//fix

		/*if (x_DWORD_E9C3C)
			sub_83E80_freemem4(x_DWORD_E9C3C);
		x_DWORD_E9C3C = (uint8_t*)sub_83CD0_malloc2(0x4b000);
		sub_6EB90(&filearray_2aa18c[filearrayindex_HFONT3DATTAB]);//2aa1d4
		*/
		//fix
		if (pre_x_DWORD_E9C3C)
			FreeMem_83E80(pre_x_DWORD_E9C3C);
		pre_x_DWORD_E9C3C = (uint8_t*)Malloc_83CD0(3000000);
		x_DWORD_E9C3C = &pre_x_DWORD_E9C3C[200000];
		CreateIndexes_6EB90(&filearray_2aa18c[filearrayindex_HFONT3DATTAB]);//2aa1d4
		help_VGA_type_resolution = 8;
		//fix
	}
	CreateIndexes_6EB90(&filearray_2aa18c[filearrayindex_MSPRD00DATTAB]);//2aa1bc
	LoadTextureData(x_WORD_180660_VGA_type_resolution, D41A0_0.terrain_2FECE.MapType, pdwScreenBuffer_351628);//ok
}
// 8E3D5: using guessed type x_DWORD sprintf(x_DWORD, const char *, ...);
// D41A0: using guessed type int x_D41A0_BYTEARRAY_0;
// D91BC: using guessed type int *off_D91BC[2];
// D91D4: using guessed type void *off_D91D4;
// E9C3C: using guessed type int x_DWORD_E9C3C;
// 180660: using guessed type __int16 x_WORD_180660_VGA_type_resolution;

int debugcounter_236100 = 0;
//----- (00055100) --------------------------------------------------------
void sub_55100(char a1)//236100
{
	signed int v2; // eax
	#if defined(x32_BIT_ENVIRONMENT)
		typedef int32_t xBITINT;
	#else
		typedef int64_t xBITINT;
	#endif
	xBITINT v3;
	signed int v4; // ebx
	xBITINT v5; // esi
	unsigned __int8 v7; // cl
	signed int i; // ebx
	unsigned __int8 v9; // al
	//type_event_0x6E8E* v11; // ecx
	signed int j; // ebx

	if (a1 == 1)
		v2 = -1;
	else
		v2 = 1;

	//fix !!!!
	int8_t* ZeroPointer=0;
	v3 = v2 * ((int8_t*)D41A0_0.struct_0x6E8E- ZeroPointer);
	v4 = 0;
	v5 = v2 * ((int8_t*)D41A0_0.terrain_2FECE.entity_0x30311 - ZeroPointer);
	//fix

	while (v4 < D41A0_0.stageIndex_0x36E01)
	{
		if (D41A0_0.stages_0x3654C[v4].str_36552_un.dword)
		{
			v7 = D41A0_0.stages_0x3654C[v4].stages_3654C_byte0;
			if ((v7 < 5) && (v7 > 0))
			{
				if (!(D41A0_0.stages_0x3654C[v4].str_3654D_byte1 & 1))
				{
					if ((v7 == 1) || (v7 == 2) || (v7 == 4))
					{
						type_entity_0x30311* temp_0x30311 = D41A0_0.stages_0x3654C[v4].str_36552_un.ptr0x30311;
						if (v2 == -1)
						{
							int diff = D41A0_0.stages_0x3654C[v4].str_36552_un.ptr0x30311 - D41A0_0.terrain_2FECE.entity_0x30311;
							int sizediff = diff * sizeof(type_entity_0x30311);
							if (((char*)D41A0_0.stages_0x3654C[v4].str_36552_un.ptr0x30311 - (char*)D41A0_0.terrain_2FECE.entity_0x30311) % sizeof(type_entity_0x30311) > 0)
								allert_error();
							D41A0_0.stages_0x3654C[v4].str_36552_un.dword = sizediff;
						}
						else
						{
							int count = D41A0_0.stages_0x3654C[v4].str_36552_un.dword / sizeof(type_entity_0x30311);
							int countadd = D41A0_0.stages_0x3654C[v4].str_36552_un.dword % sizeof(type_entity_0x30311);
							if (countadd > 0)allert_error();
							D41A0_0.stages_0x3654C[v4].str_36552_un.ptr0x30311 = &D41A0_0.terrain_2FECE.entity_0x30311[count];
						}
#ifdef x32_BIT_ENVIRONMENT
						if (D41A0_0.stages_0x3654C[v4].str_36552_un.ptr0x30311 != (type_entity_0x30311*)((uint8_t*)temp_0x30311 + (xBITINT)v5))
							allert_error();  // only for x86
#endif
					}
				}
				else
				{
					type_event_0x6E8E* temp_0x6E8E = D41A0_0.stages_0x3654C[v4].str_36552_un.ptr0x6E8E;
					if (v2 == -1)
					{
						int diff = D41A0_0.stages_0x3654C[v4].str_36552_un.ptr0x6E8E - D41A0_0.struct_0x6E8E;
						int sizediff = diff * sizeof(type_shadow_str_0x6E8E);
						if (((char*)D41A0_0.stages_0x3654C[v4].str_36552_un.ptr0x6E8E - (char*)D41A0_0.struct_0x6E8E) % sizeof(type_event_0x6E8E) > 0)
							allert_error();
						D41A0_0.stages_0x3654C[v4].str_36552_un.dword = sizediff;
					}
					else
					{
						int count = D41A0_0.stages_0x3654C[v4].str_36552_un.dword / sizeof(type_shadow_str_0x6E8E);
						int countadd = D41A0_0.stages_0x3654C[v4].str_36552_un.dword % sizeof(type_shadow_str_0x6E8E);
						if (countadd > 0)allert_error();
						D41A0_0.stages_0x3654C[v4].str_36552_un.ptr0x6E8E = &D41A0_0.struct_0x6E8E[count];
					}
#ifdef x32_BIT_ENVIRONMENT
					if (D41A0_0.stages_0x3654C[v4].str_36552_un.ptr0x6E8E != (type_event_0x6E8E*)((uint8_t*)temp_0x6E8E + (xBITINT)v3))
						allert_error();  // only for x86
#endif
				}
			}
		}
		v4++;
	}
	//2361fc
	for (i = 1; ; ++i)
	{
		if (i > D41A0_0.countStageVars_0x36E00)
			break;
		v9 = D41A0_0.StageVars2_0x365F4[i].index_0x3647A_0;
		if (v9 >= 3u && (v9 <= 5u || v9 >= 8u && v9 <= 9u))
		{
			if (!(D41A0_0.StageVars2_0x365F4[i].stage_0x3647A_1 & 2))
			{
				type_event_0x6E8E* temp_0x6E8E = D41A0_0.StageVars2_0x365F4[i].str_0x3647C_4.pointer_0x6E8E;
				if (temp_0x6E8E >= x_DWORD_EA3E4[0] && temp_0x6E8E < x_DWORD_EA3E4[1000])
				{
					if (v2 == -1)
					{
						int diff = D41A0_0.StageVars2_0x365F4[i].str_0x3647C_4.pointer_0x6E8E - D41A0_0.struct_0x6E8E;
						int sizediff = diff * sizeof(type_shadow_str_0x6E8E);
						if (((char*)D41A0_0.StageVars2_0x365F4[i].str_0x3647C_4.pointer_0x6E8E - (char*)D41A0_0.struct_0x6E8E) % sizeof(type_event_0x6E8E) > 0)
							allert_error();
						D41A0_0.StageVars2_0x365F4[i].str_0x3647C_4.dword = sizediff;
					}
					else
					{
						int count = D41A0_0.StageVars2_0x365F4[i].str_0x3647C_4.dword / sizeof(type_shadow_str_0x6E8E);
						int countadd = D41A0_0.StageVars2_0x365F4[i].str_0x3647C_4.dword % sizeof(type_shadow_str_0x6E8E);
						if (countadd > 0)allert_error();
						D41A0_0.StageVars2_0x365F4[i].str_0x3647C_4.pointer_0x6E8E = &D41A0_0.struct_0x6E8E[count];
					}
#ifdef x32_BIT_ENVIRONMENT
					if (D41A0_0.StageVars2_0x365F4[i].str_0x3647C_4.pointer_0x6E8E != (type_event_0x6E8E*)((uint8_t*)temp_0x6E8E + (xBITINT)v3))
						allert_error();  // only for x86
#endif
				}
			}
		}
	}

	//23620a
	for (j = 1; j < 50; j++)
	{
		if (D41A0_0.str_0x3664C[j].byte_0)
		{
			type_event_0x6E8E* temp_0x6E8E = D41A0_0.str_0x3664C[j].event_A.pointer_0x6E8E;
			if (v2 == -1)
			{
				int diff = D41A0_0.str_0x3664C[j].event_A.pointer_0x6E8E - D41A0_0.struct_0x6E8E;
				int sizediff = diff * sizeof(type_shadow_str_0x6E8E);
				if (((char*)D41A0_0.str_0x3664C[j].event_A.pointer_0x6E8E - (char*)D41A0_0.struct_0x6E8E) % sizeof(type_event_0x6E8E) > 0)
					allert_error();
				D41A0_0.str_0x3664C[j].event_A.dword = sizediff;//0x36656
			}
			else
			{
				int count = D41A0_0.str_0x3664C[j].event_A.dword / sizeof(type_shadow_str_0x6E8E);
				int countadd = D41A0_0.str_0x3664C[j].event_A.dword % sizeof(type_shadow_str_0x6E8E);
				if (countadd > 0)allert_error();
				D41A0_0.str_0x3664C[j].event_A.pointer_0x6E8E = &D41A0_0.struct_0x6E8E[count];//0x36656
			}
#ifdef x32_BIT_ENVIRONMENT
			if (D41A0_0.str_0x3664C[j].event_A.pointer_0x6E8E != (type_event_0x6E8E*)((uint8_t*)temp_0x6E8E + (xBITINT)v3))
				allert_error();  // only for x86
#endif
		}
	}
}

//----- (00057680) --------------------------------------------------------
void sub_57680_FixPointersAfterLoad()//238680
{
	D41A0_0.str_0x3664C[0].event_A.pointer_0x6E8E = nullptr;

	for (int indexx = 1; x_DWORD_EA3E4[indexx] < x_DWORD_EA3E4[1000]; indexx++)
	{
		#if defined(x32_BIT_ENVIRONMENT)
			if ((uint32_t)x_DWORD_EA3E4[indexx]->dword_0xA4_164x == 0x2c75e28)
				x_DWORD_EA3E4[indexx]->dword_0xA4_164x = unk_F42B0x;
		#else
			if ((uint64_t)x_DWORD_EA3E4[indexx]->dword_0xA4_164x == 0x2c75e28)//0x014F82E8//0x2c75e28-(uint32_t)&D41A0_BYTESTR_0
				x_DWORD_EA3E4[indexx]->dword_0xA4_164x = unk_F42B0x;
		#endif
	}

	for (int v0 = 0; v0 < D41A0_0.word_0xe; v0++)
	{
		x_DWORD_EA3E4[D41A0_0.array_0x2BDE[v0].word_0x00a_2BE4_11240]->dword_0xA4_164x = &D41A0_0.array_0x2BDE[v0].dword_0x3E6_2BE4_12228;
	}
	for (int indexx = 1; x_DWORD_EA3E4[indexx] < x_DWORD_EA3E4[1000]; indexx++)
		if (x_DWORD_EA3E4[indexx]->class_0x3F_63)
			x_DWORD_EA3E4[indexx]->dword_0xA0_160x = &str_D7BD6[(x_DWORD_EA3E4[indexx]->dword_0xA0_160x - D41A0_0.dword_0x36DF6)+ 59];
}

//----- (000549A0) --------------------------------------------------------
void sub_549A0(type_str_611* a1x, type_str_611* a2x)//2359a0
{
	a1x->array_0x3E9_1001x = a2x->array_0x3E9_1001x;
	a1x->array_0x263_611x = a2x->array_0x263_611x;
	a1x->array_0x41D_1053z = a2x->array_0x41D_1053z;
	a1x->array_0x3B5_949x = a2x->array_0x3B5_949x;
	a1x->array_0x437_1079x = a2x->array_0x437_1079x;
}

//----- (00049F90) --------------------------------------------------------
void sub_49F90()//22af90
{
	int iy;
	signed int v2; // ebx
	type_event_0x6E8E* indexx; // eax
	for (iy = 1; iy < 0x3e8; iy++)
	{
		if (x_DWORD_EA3E4[iy]->class_0x3F_63 && x_DWORD_EA3E4[iy]->struct_byte_0xc_12_15.byte[1] & 4)
			sub_57F20(x_DWORD_EA3E4[iy]);
	}
	D41A0_0.dword_0x35 = -1;
	v2 = 999;
	D41A0_0.dword_0x11e6 = -1;
	do
	{
		indexx = x_DWORD_EA3E4[v2];
		if (indexx->class_0x3F_63)
		{
			if (indexx->struct_byte_0xc_12_15.byte[2] & 2)
			{
				D41A0_0.dword_0x11e6++;
				D41A0_0.dword_0x11EA[D41A0_0.dword_0x11e6] = x_DWORD_EA3E4[v2];
			}
		}
		else
		{
			D41A0_0.dword_0x35++;
			D41A0_0.pointers_0x246[D41A0_0.dword_0x35] = x_DWORD_EA3E4[v2];
		}
		v2--;
	} while (v2 > 0);
}

//----- (00055AB0) --------------------------------------------------------
void sub_55AB0(type_str_0x2BDE* playStr)//236ab0
{
	for (int i = 0; i < 26; i++)
	{
		if (playStr->dword_0x3E6_2BE4_12228.str_611.array_0x3E9_1001x.byte[x_BYTE_D94FF_spell_index[i]] || playStr->dword_0x3E6_2BE4_12228.str_611.array_0x403_1027x.byte[x_BYTE_D94FF_spell_index[i]])
		{
			if (!playStr->dword_0x3E6_2BE4_12228.str_611.array_0x333_819x.word[x_BYTE_D94FF_spell_index[i]])
			{
				type_event_0x6E8E* tempEvent = IfSubtypeCallAxisEvent_4A190(&x_DWORD_EA3E4[playStr->word_0x00a_2BE4_11240]->axis_0x4C_76, 15, x_BYTE_D94FF_spell_index[i]);
				if (tempEvent)
				{
					playStr->dword_0x3E6_2BE4_12228.str_611.array_0x333_819x.word[x_BYTE_D94FF_spell_index[i]] = tempEvent - D41A0_0.struct_0x6E8E;
					tempEvent->parentId_0x28_40 = x_DWORD_EA3E4[playStr->word_0x00a_2BE4_11240] - D41A0_0.struct_0x6E8E;
					tempEvent->struct_byte_0xc_12_15.byte[0] |= 1u;
					SetSpell_6D5E0(tempEvent, playStr->dword_0x3E6_2BE4_12228.str_611.array_0x437_1079x.byte[x_BYTE_D94FF_spell_index[i]]);
				}
			}
		}
		else
		{
			if (playStr->dword_0x3E6_2BE4_12228.str_611.array_0x333_819x.word[x_BYTE_D94FF_spell_index[i]])
			{
				playStr->dword_0x3E6_2BE4_12228.str_611.array_0x333_819x.word[x_BYTE_D94FF_spell_index[i]] = 0;
				sub_57F20(x_DWORD_EA3E4[playStr->dword_0x3E6_2BE4_12228.str_611.array_0x333_819x.word[x_BYTE_D94FF_spell_index[i]]]);
			}
		}
	}
	if (playStr->dword_0x3E6_2BE4_12228.str_611.word_0x451_1105 != -1 && !playStr->dword_0x3E6_2BE4_12228.str_611.array_0x333_819x.word[playStr->dword_0x3E6_2BE4_12228.str_611.word_0x451_1105])
		playStr->dword_0x3E6_2BE4_12228.str_611.word_0x451_1105 = -1;
	if (playStr->dword_0x3E6_2BE4_12228.str_611.word_0x453_1107 != -1 && !playStr->dword_0x3E6_2BE4_12228.str_611.array_0x333_819x.word[playStr->dword_0x3E6_2BE4_12228.str_611.word_0x453_1107])
		playStr->dword_0x3E6_2BE4_12228.str_611.word_0x453_1107 = -1;
}

//----- (00071990) --------------------------------------------------------
void sub_71990()//252990
{
	char i; // bl
	unsigned __int16 j; // si
	unsigned int v4; // ST04_4
	char v6_return; // [esp+4h] [ebp-4h]

	v6_return = 0;
	if (!x_DWORD_E9C28_str)
		sub_712F0();
	for(int i=0;i<504;i++)
		if (!D41A0_0.array_0x39[i])
			sub_70D20(i);
	for (i = 2; i && !v6_return; i--)
	{
		for (j = 0; j < 504 && !v6_return; j++)
		{
			if (i == D41A0_0.array_0x39[j] && !str_DWORD_F66F0x[j])
			{
				v4 = sub_70EF0(j);
				if (sub_71E60(x_DWORD_E9C28_str) <= v4)
				{
					if (sub_71E60(x_DWORD_E9C28_str) < 0x400)
						v6_return = 1;
				}
				else
				{
					InitTmaps(j);
				}
			}
		}
	}
}

//----- (00071930) --------------------------------------------------------
void sub_71930()//252930
{
	for (int i=0; i < 508; i++) D41A0_0.array_0x39[i] = 0;
	for (int i=0; i < 504; i++) {
		if (str_DWORD_F66F0x[i])
		{
			D41A0_0.array_0x39[i] = 1;
			if (m_LevelSpriteList_F5340[i])
				D41A0_0.array_0x39[i]++;
		}
	}	
}

//----- (00049830) --------------------------------------------------------
void SetStagetagForTermod_49830(Type_Level_2FECE* terrain)//22a830 //set v1x->word_12
{
	type_entity_0x30311* entity = &terrain->entity_0x30311[1];
	do
	{
		if (entity->DisId == -1 && entity->type_0x30311 == 0x0A)
		{
			if ((entity->subtype_0x30311 == 0x1C) || (entity->subtype_0x30311 == 0x1D) || (entity->subtype_0x30311 == 0x1F) || (entity->subtype_0x30311 == 0x32) || (entity->subtype_0x30311 == 0x50))
				entity->stageTag_12 = 1;
		}
		entity++;
	} while (entity < &terrain->entity_0x30311[1200]);
}

//----- (0006EB90) --------------------------------------------------------
void CreateIndexes_6EB90(filearray_struct* a1)//24fb90
{
	for (uint32_t i = 0; (a1[i].begin_buffer) != &ZERO_BUFFER_PST2; i++)
	{
		if (x_WORD_180660_VGA_type_resolution & 1)
			sub_98709_create_index_dattab_power(*a1[i].begin_buffer, *a1[i].end_buffer, *a1[i].dat_buffer, *a1[i].posistruct);//279709 //1a6f44,1a6f86,1a6578
		  //result = sub_98709_create_index_dattab_power(**i, *i[1], *i[2]);
		  //1a6f44 000000000000020000000c0d92000000
		  //1a6f86 00000000000000000000000000000000
		  //1a6578 0b0005a1a1a1a1a10005a1b413aaa100
		else
			sub_9874D_create_index_dattab(*a1[i].begin_buffer, *a1[i].end_buffer, *a1[i].dat_buffer, *a1[i].posistruct);
	}
}
// 180660: using guessed type __int16 x_WORD_180660_VGA_type_resolution;

//----- (00046F80) --------------------------------------------------------
void LoadTextureData(__int16 vgaTypeResolution, MapType_t MapType, uint8_t* textureBuffer)//227f80
{
	MapType_t v0; // al
	//char* v1;
	//int v2; // esi
	int32_t file2lenght; // eax
	int32_t file1Lenght;
	//char* filearray1;
	//int v4; // eax
	//char* v5; // ebx
	//unsigned int v6; // esi
	//bitmap_pos_struct2_t* v7x; // esi
	//int v8; // [esp+0h] [ebp-2h]
	//int v9; // [esp+4h] [ebp+2h]
	//int v10; // [esp+8h] [ebp+6h]
	//int v11; // [esp+Ch] [ebp+Ah]
	//__int16 v12; // [esp+10h] [ebp+Eh]
	//char v13; // [esp+40h] [ebp+3Eh]
	//int v14; // [esp+80h] [ebp+7Eh]

	char dataPath[MAX_PATH];
	char tabPath[MAX_PATH];

	sub_47130();
	v0 = MapType;
	switch (v0)
	{
	case MapType_t::Night:
			{
				if (vgaTypeResolution == 1)
				{
					sprintf(dataPath, "%s/%s", cdDataPath.c_str(), "DATA/MWEBN0-0.DAT");
					sprintf(tabPath, "%s/%s", cdDataPath.c_str(), "DATA/MWEBN0-0.TAB");
				}
				else
				{
					sprintf(dataPath, "%s/%s", cdDataPath.c_str(), "DATA/HWEBN0-0.DAT");
					sprintf(tabPath, "%s/%s", cdDataPath.c_str(), "DATA/HWEBN0-0.TAB");
				}
				break;
			}
	case MapType_t::Cave:
			{
				if (vgaTypeResolution == 1)
				{
					sprintf(dataPath, "%s/%s", cdDataPath.c_str(), "DATA/MWEBC0-0.DAT");
					sprintf(tabPath, "%s/%s", cdDataPath.c_str(), "DATA/MWEBC0-0.TAB");
				}
				else
				{
					sprintf(dataPath, "%s/%s", cdDataPath.c_str(), "DATA/HWEBC0-0.DAT");
					sprintf(tabPath, "%s/%s", cdDataPath.c_str(), "DATA/HWEBC0-0.TAB");
				}
				break;
			}
	case MapType_t::Day:
		{
			if (vgaTypeResolution == 1)
			{
				sprintf(dataPath, "%s/%s", cdDataPath.c_str(), "DATA/MWEBD0-0.DAT");
				sprintf(tabPath, "%s/%s", cdDataPath.c_str(), "DATA/MWEBD0-0.TAB");
			}
			else
			{
				sprintf(dataPath, "%s/%s", cdDataPath.c_str(), "DATA/HWEBD0-0.DAT");
				sprintf(tabPath, "%s/%s", cdDataPath.c_str(), "DATA/HWEBD0-0.TAB");
			}
			break;
		}
	}

	file1Lenght = DataFileIO::ReadFileAndDecompress(dataPath, &textureBuffer);
	if (file1Lenght > 0)
	{
		file1Lenght = (file1Lenght + 8) & 0xFFF8;
		//v14 = v4;
		uint8_t* x = &textureBuffer[file1Lenght];
		file2lenght = DataFileIO::ReadFileAndDecompress(tabPath, &x); //fix it
		//v5 = file2lenght;
		if (file2lenght > 0)
		{
			//v6 = file2lenght+file1Lenght;
			//filearray1 = (char*)sub_83CD0_malloc2(file2lenght + file1Lenght);
			//x_DWORD_D4188 = (uint8_t*)filearray1;
			x_DWORD_D4188 = (bitmap_pos_struct2_t*)Malloc_83CD0(file2lenght + file1Lenght);
			if (x_DWORD_D4188)
			{
				qmemcpy(x_DWORD_D4188, (void*)textureBuffer, file2lenght + file1Lenght);
				x_DWORD_D418C = (bitmap_pos_struct2_t*)((int8_t*)x_DWORD_D4188+file1Lenght);
				//x_DWORD_D418C = &x_DWORD_D4188[file1Lenght / sizeof(bitmap_pos_struct2_t)];
				x_DWORD_D4190 = (bitmap_pos_struct2_t*)((int8_t*)x_DWORD_D4188+file2lenght+file1Lenght);
				//x_DWORD_D4190 = &x_DWORD_D4188[(file2lenght + file1Lenght) / sizeof(bitmap_pos_struct2_t)];
				if (vgaTypeResolution & 1)
					sub_98709_create_index_dattab_power(x_DWORD_D418C, x_DWORD_D4190, (uint8_t*)x_DWORD_D4188, x_DWORD_D4188t_spritestr);
				else
					sub_9874D_create_index_dattab(x_DWORD_D418C, x_DWORD_D4190, (uint8_t*)x_DWORD_D4188, x_DWORD_D4188t_spritestr);
			}
		}
	}
}

//----- (0006D5E0) --------------------------------------------------------
void SetSpell_6D5E0(type_event_0x6E8E* entity, char spell)//24e5e0
{
	int v2y; // eax
	int8_t actspell;

	actspell = spell;
	if (spell > SPELLS_BEGIN_BUFFER_str[entity->model_0x40_64].byte_0 - 1)
		actspell = SPELLS_BEGIN_BUFFER_str[entity->model_0x40_64].byte_0 - 1;
	if (entity->word_0x2E_46)
	{
		entity->word_0x2C_44 = actspell + 1;
	}
	else
	{
		entity->byte_0x46_70 = actspell;
		entity->word_0x2A_42 = SPELLS_BEGIN_BUFFER_str[entity->model_0x40_64].subspell[actspell].dword_2;
		entity->word_0x30_48 = SPELLS_BEGIN_BUFFER_str[entity->model_0x40_64].subspell[actspell].word_0x18;
		entity->byte_0x3B_59 = (SPELLS_BEGIN_BUFFER_str[entity->model_0x40_64].subspell[actspell].byte_0x1B & 1) == 0;
		entity->byte_0x3C_60 = 0;
		entity->byte_0x3D_61 = 0;
		//fix
		entity->dword_0x88_136 = SPELLS_BEGIN_BUFFER_str[entity->model_0x40_64].subspell[actspell].dword_A;
		//fix
		v2y = sub_6D710(x_DWORD_EA3E4[entity->parentId_0x28_40], entity->model_0x40_64, actspell);
		entity->maxMana_0x8C_140 = v2y;
		if (entity->word_0x30_48)
			v2y /= entity->word_0x30_48;
		entity->mana_0x90_144 = v2y;		
		if (x_D41A0_BYTEARRAY_4_struct.setting_byte3_24 & 0x20)
		{
			entity->dword_0x88_136 = 0;
			entity->mana_0x90_144 = 1;
		}
	}
}

//----- (000712F0) --------------------------------------------------------
void sub_712F0()//2522f0
{
	x_DWORD_E9C28_str = sub_71B40(x_D41A0_BYTEARRAY_4_struct.dword_0xE6_heapsize_230, 504, (type_x_DWORD_E9C28_str*)x_D41A0_BYTEARRAY_4_struct.pointer_0xE2_heapbuffer_226);
	if (x_DWORD_E9C28_str)
		x_DWORD_E9C08x = sub_72120(0x1F8u);
	sub_70A60_open_tmaps();
	sub_71A70_setTmaps(D41A0_0.terrain_2FECE.MapType);
	memset(str_DWORD_F66F0x, 0, 504 * sizeof(type_particle_str**));
	memset(str_F5F10, 0, 504*sizeof(type_particle_str**));
	memset(x_DWORD_F5730, 0, 2016);
	sub_71890();
	sub_718F0();
}

//----- (00071890) --------------------------------------------------------
void sub_71890()//252890
{
	//char result; // al
	int v0y = 0;
	memset(m_LevelSpriteList_F5340, 0, 504);
    while (str_WORD_D951C[v0y].speed_6 || str_WORD_D951C[v0y].rotSpeed_8)
    {
        if (str_WORD_D951C[v0y].byte_11 == -1)
        {
            m_LevelSpriteList_F5340[str_WORD_D951C[v0y].word_0] = str_WORD_D951C[v0y].byte_11;
        }
        v0y++;
    }
}

//----- (000718F0) --------------------------------------------------------
void sub_718F0()//2528f0
{
	unsigned __int16 v0; // bx
	v0 = 0;
	do
	{
		if (m_LevelSpriteList_F5340[v0])
		{
			InitTmaps(v0);
		}
		v0++;
	} while (v0 < 504);
}

//----- (00071A70) --------------------------------------------------------
void sub_71A70_setTmaps(MapType_t a1)//252a70
{
	FILE* v1; // edx
	//unsigned __int8 result; // al

	v1 = x_DWORD_DB73C_tmapsfile;
	//result = a1;
	switch (a1)
	{
	case MapType_t::Day:
	{
		v1 = x_DWORD_DB740_tmaps00file;
		break;
	}
	case MapType_t::Night:
	{
		v1 = x_DWORD_DB744_tmaps10file;
		break;
	}
	case MapType_t::Cave:
	{
		v1 = x_DWORD_DB748_tmaps20file;
		break;
	}
	}
	x_DWORD_DB73C_tmapsfile = v1;
	//return result;
}
// DB73C: using guessed type int x_DWORD_DB73C_tmapsfile;
// DB740: using guessed type int x_DWORD_DB740_tmaps00file;
// DB744: using guessed type int x_DWORD_DB744_tmaps10file;
// DB748: using guessed type int x_DWORD_DB748_tmaps20file;

//----- (00072120) --------------------------------------------------------
type_E9C08* sub_72120(unsigned __int16 a1)//253120
{
	unsigned __int16 v1; // di
	type_E9C08* v2x; // esi
	type_E9C08* v3x; // ebx
	type_animations1* v4; // eax
	//int v5; // eax

	v1 = a1;
	sub_83CC0(9);
	v2x = (type_E9C08*)Malloc_83CD0(sizeof(type_E9C08));
	v3x = v2x;
	if (v2x && (v4 = (type_animations1*)Malloc_83CD0(sizeof(type_animations1) * a1), (v2x->dword_2 = v4) != 0))
	{
		v2x->word_0 = a1;
		while (--v1 != 0xffff)
		{
			//v5 = 7 * v1;
			//*(x_DWORD *)(v2x->dword_2 + 4 * v5 + 4) = 0;
			//*(x_DWORD *)(v2x->dword_2 + 4 * v5) = 0;
			v2x->dword_2[v1].Particles_4 = 0;
			v2x->dword_2[v1].dword_0 = 0;
		}
	}
	else if (v2x)
	{
		FreeMem_83E80((uint8_t*)v2x);
		v3x = 0;
	}
	sub_83CC0(10);
	return v3x;
}

//----- (00071B40) --------------------------------------------------------
type_x_DWORD_E9C28_str* sub_71B40(int a1, unsigned __int16 a2, type_x_DWORD_E9C28_str* a3y)//252b40
{
	unsigned __int16 v3; // di
	int v4; // eax
	int v5; // eax
	int v6; // edx
	type_x_DWORD_E9C28_str* v7y; // esi
	//int v8; // eax
	type_x_DWORD_E9C28_str* v10y; // ebx
	uint8_t* v11x; // eax
	uint8_t* v12x; // eax
	uint8_t* v13x; // eax
	int v14; // [esp+0h] [ebp-Ch]
	//allert_error();//test a3y->dword_0 and a1
	v3 = a2;
	if (a3y)
	{
		v4 = 14 * a2;
		v14 = v4;
		v5 = 4 * a2 + v4 + 26;
		v6 = a1 - v5;
		if (a1 == v5)
			return 0;
		a3y->word_20 = 0;
		a3y->word_24 = 2;
		a3y->dword_0 = v6;
		a3y->dword_4 = v6;
		v7y = a3y;
		a3y->word_22 = a2;
		a3y->str_8_data = (subtype_x_DWORD_E9C28_str*)a3y->data;
		//v8 = v14 + a3x + 26;
		a3y->dword_12x = (subtype_x_DWORD_E9C28_str**)((uint8_t*)a3y->data+v14);// (uint32_t)(v14 + (uint8_t*)a3y + 26);//must fix for 64 bit version - data
		a3y->dword_16x = (uint32_t*)((uint8_t*)a3y->data+(v14 + 4 * a2));//(uint32_t)(4 * a2 + (v14 + (uint8_t*)a3y + 26));//must fix for 64 bit version - data
		while (--v3 != 0xffff)
			//*(x_DWORD*)(a3y->dword_8_data + 14 * v3 + 4) = 0;
			a3y->str_8_data[v3].dword_4 = 0;
	}
	else
	{
		v10y = (type_x_DWORD_E9C28_str*)Malloc_83CD0(26);
		v7y = v10y;
		if (!v10y
			|| (v11x = (uint8_t*)Malloc_83CD0(a1), (v10y->dword_16x = (uint32_t*)v11x) == 0)
			|| (v12x = (uint8_t*)Malloc_83CD0(14 * a2), (v10y->str_8_data = (subtype_x_DWORD_E9C28_str*)v12x) == 0)
			|| (v13x = (uint8_t*)Malloc_83CD0(4 * a2), (v10y->dword_12x = (subtype_x_DWORD_E9C28_str**)v13x) == 0))
		{
			if (v10y)
			{
				if (v10y->dword_16x)
				{
					if (v10y->str_8_data)
						FreeMem_83E80((uint8_t*)v10y->str_8_data);
					FreeMem_83E80((uint8_t*)v10y->dword_16x);
				}
				FreeMem_83E80((uint8_t*)v10y);
			}
			exit(1);
		}
		v10y->word_20 = 0;
		v10y->word_24 = 1;
		v10y->word_22 = a2;
		v10y->dword_0 = a1;
		v10y->dword_4 = a1;
		while (--v3 != 0xffff)
			//*(x_DWORD*)(v10y->dword_8_data + 14 * v3 + 4) = 0;
			v10y->str_8_data[v3].dword_4 = 0;
	}
	return v7y;
}

//----- (0006D710) --------------------------------------------------------
int sub_6D710(type_event_0x6E8E* a1x, unsigned __int8 a2, unsigned __int8 a3)//24e710
{
	signed int v3; // ecx
	int result; // eax
	//int v5; // edx
	type_event_0x6E8E* v6x; // ebx
	int v7; // edx
	int v8; // eax

	v3 = 0;
	//result = *(x_DWORD *)&(*xadataspellsdat.colorPalette_var28)[80 * a2 + 6 + 26 * a3];
	result = SPELLS_BEGIN_BUFFER_str[a2].subspell[a3].dword_6;
	if (a2 == 2 && a1x > x_DWORD_EA3E4[0])
	{
		//v5 = a1x->dword_0xA4_164;
		v6x = x_DWORD_EA3E4[a1x->dword_0xA4_164x->word_0x3A_58];
		if (v6x <= x_DWORD_EA3E4[0])
			goto LABEL_23;
		switch (v6x->dword_0x10_16)
		{
		case 0:
			result = 1000;
			break;
		case 1:
			result = 10000;
			break;
		case 2:
			result = 20000;
			break;
		case 3:
			result = 40000;
			break;
		case 4:
			result = 80000;
			break;
		case 5:
			result = 160000;
			break;
		case 6:
			result = 320000;
			break;
		default:
			result = 300000000;
			break;
		}
		if (v6x->dword_0x10_16 >= 7)
			goto LABEL_25;
		if (a3 >= 1u)
		{
			if (a3 <= 1u)
			{
				v7 = 320 * result;
				v8 = 320 * result;
			}
			else
			{
				if (a3 != 2)
					goto LABEL_21;
				v8 = 384 * result;
				v7 = v8;
			}
			//result = (v8 - (__CFSHL__(v7 >> 31, 8) + (v7 >> 31 << 8))) >> 8;
			result = (v7 - (my_sign32(v7) << 8) + my_sign32(v7)) >> 8;
		}
	LABEL_21:
		if (v6x->dword_0x10_16)
		{
		LABEL_25:
			if (v3)
				result += 3000;
			return result;
		}
		//v5 = a1x->dword_0xA4_164;
	LABEL_23:
		if (a1x->dword_0xA4_164x->byte_0x1BE_446)
			v3 = 1;
		goto LABEL_25;
	}
	return result;
}
// 13880: using guessed type int /*__fastcall*/ nullsub_1(x_DWORD);
// EA3E4: using guessed type int x_DWORD_EA3E4[];

//----- (00083CC0) --------------------------------------------------------
void sub_83CC0(char a1)//264cc0
{
	x_BYTE_E29E8 = a1; // FIXME: Can this be removed? Only written, never read.
}
// E29E8: using guessed type char x_BYTE_E29E8;
